Да се реализира възможност за внасяне и теглене на средства от банкова сметка. Условията за внасянето и тегленето да следните:
В банката има списък със сметки. Всяка сметка има титуляр, IBAN и налична към момента сума.
Клиентите могат да теглят пари в брой по следния начин:
На каса в банката (ограничението е например 5000)
Чрез ATM (ограничението е например 800)
Методите, чрез които се внасят или теглят определени суми, трябва да хвърлят подходящи изключения, ако не могат да си свършат работата.


package finance;

public class Account {

    private Customer accountHolder;
    private final String IBAN;
    private double funds;

    public Account(Customer accountHolder, String IBAN) {
        this.accountHolder = accountHolder;
        this.IBAN = IBAN;
    }

    public Customer getAccountHolder() {
        return accountHolder;
    }

    public void setAccountHolder(Customer accountHolder) {
        this.accountHolder = accountHolder;
    }

    public double getFunds() {
        return funds;
    }

    public String getIBAN() {
        return IBAN;
    }

    public void setFunds(double funds) throws IllegalArgumentException {
        if (funds < 0) {
            throw new IllegalArgumentException(
                    "Funds must be positive number, but " + funds + " is passed.");
        } else {
            this.funds = funds;
        }
    }

    @Override
    public String toString() {

        return "Account{" + "accountHolder=" + accountHolder + ", funds=" + funds + '}';
    }

}


package finance;

import java.util.ArrayList;
import java.util.List;

public class Bank {

    private String name;
    private List<Account> accounts;
    private double limitATM;
    private double limitCashDesk;

    public Bank() {
        accounts = new ArrayList();
    }

    public Bank(String name) {
        this.name = name;
        accounts = new ArrayList();
    }

    public Bank(String name, double limitATM, double limitCashDesk) {
        this.name = name;
        this.limitATM = limitATM;
        this.limitCashDesk = limitCashDesk;
        accounts = new ArrayList();
    }

    public String getName() {
        return name;
    }

    public List<Account> getAccounts() {
        return accounts;
    }

    public void addAccount(Account account) {
        if (!this.accounts.contains(account)) {
            this.accounts.add(account);
        }
    }

    public void deposit(Account account, double funds) throws IllegalArgumentException {
        if (funds <= 0) {
            throw new IllegalArgumentException("Funds must be positive number, but " + funds + " is passed.");
        } else {
            account.setFunds(account.getFunds() + funds);
        }
    }

    public void withdraw(Account account, double funds) throws IllegalArgumentException {
        if (funds < 0) {
            throw new IllegalArgumentException("Funds must be positive number but " + funds + " is passed.");
        } else {
            account.setFunds(account.getFunds() - funds);
        }
    }

    public void withdrawWithLimit(Account account, double funds, double limit) throws LimitExceededException, NotEnoughFundsException {
        if (funds > limit) {
            throw new LimitExceededException(limit, funds);
        } else if (account.getFunds() < funds) {
            throw new NotEnoughFundsException(account.getFunds(), funds);
        } else {
            withdraw(account, funds);
        }
    }

    public void withdrawATM(Account account, double funds) throws LimitExceededException, NotEnoughFundsException {
        withdrawWithLimit(account, funds, limitATM);
    }

    public void withdrawCashDesk(Account account, double funds) throws LimitExceededException, NotEnoughFundsException {
        withdrawWithLimit(account, funds, limitCashDesk);
    }

    public void displayAccounts() {
        for (Account account : this.accounts) {
            System.out.println(account);
        }
    }

    @Override
    public String toString() {
        return "Bank{" +
                "name='" + name + '\'' +
                ", limitATM=" + limitATM +
                ", limitCashDesk=" + limitCashDesk +
                '}';
    }
}


package finance;

public class Customer {

    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Client{" + "name=" + name + '}';
    }

}

package finance;

public class LimitExceededException extends Exception {

    private final double limit;
    private final double fundsRequired;

    public LimitExceededException(double limit, double fundsRequired) {
        this.limit = limit;
        this.fundsRequired = fundsRequired;
    }

    public double getLimit() {
        return limit;
    }

    public double getFundsRequired() {
        return fundsRequired;
    }

    @Override
    public String toString() {
        return "LimitExceededException{" + "limit=" + limit + ", fundsRequired=" + fundsRequired + '}';
    }

}

package finance;

public class NotEnoughFundsException extends Exception {

    private final double accountBalance;
    private final double fundsRequired;

    public NotEnoughFundsException(double accountBalance, double fundsRequired) {
        this.accountBalance = accountBalance;
        this.fundsRequired = fundsRequired;
    }

    public double getAccountBalance() {
        return accountBalance;
    }

    public double getFundsRequired() {
        return fundsRequired;
    }

    @Override
    public String toString() {
        return "notEnoughFunds{" + "accountBalance="
                + accountBalance + ", fundsRequired="
                + fundsRequired + '}';
    }

}

import box.Box;
import finance.*;
import hotel.Hotel;
import hotel.InsufficientNumberOfRoomsException;
import hotel.RoomIsRentedException;

public class Main {

    public static void main(String[] args) {
        // Task 1 Box
        {
            Box box = new Box(2, 3, 4);
            System.out.println(box);
            double increasePercentage = 300;
            try {
                box.increaseDimensions(increasePercentage);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            }
            System.out.println(box);
            double volumeNumber = 100;
            box.optionalIncreaseDimensions(increasePercentage, volumeNumber);
        }

        // Task 2 Rent Hotel Rooms
        {
            Hotel hotel = new Hotel(5);
            try {
                hotel.rentRoom(2);
                hotel.rentRoom(1);
                hotel.rentRoom(3);
                hotel.rentRoom(4);
                hotel.rentRoom(5);
                hotel.rentRoom(6);
            } catch (RoomIsRentedException | InsufficientNumberOfRoomsException e) {
                e.printStackTrace();
            }
        }

        // Task 3 Bank Accounts
        {
            Bank unicreditBulbank = new Bank("UnicreditBulbank", 800, 5000);
            Customer maria = new Customer("Maria");
            Account mariasAccount = new Account(maria, "UNCR10BG1234567890");
            unicreditBulbank.addAccount(mariasAccount);
            //unicreditBulbank.deposit(mariasAccount, -1000);
            unicreditBulbank.deposit(mariasAccount, 1000);
            unicreditBulbank.displayAccounts();

            try {
                unicreditBulbank.withdrawATM(mariasAccount, 500);
                unicreditBulbank.withdrawATM(mariasAccount, 600);
                unicreditBulbank.withdrawCashDesk(mariasAccount, 6000);
            } catch (LimitExceededException e) {
                e.printStackTrace();
            } catch (NotEnoughFundsException e) {
                e.printStackTrace();
            }
        }
    }
}
