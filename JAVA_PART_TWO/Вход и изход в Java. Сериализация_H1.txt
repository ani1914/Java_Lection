В цех се бутилира минерална вода. Приемаме, че цехът е точно на мястото на минералния извор и черпи водата от него. Минералната вода може да бъде бутилирана в пластмасови или стъклени бутилки, които са с обем 0,5 литра. Да се реализира доставка на бутилки, бутилиране на водата в цеха и продажба на готовата бутилирана минерална вода. Методът за бутилирането на водата, трябва да се хвърля изключение от тип InsufficientNumberOfBottelsException, ако в цеха няма налични бутилки.
При продажба на бутилираната минерална вода, се издава фактура, в която се описва следното: номер на фактурата, доставчик, получател, дата на издаване, брой продадени бутилки вода, единичната продажна цена на бутилираната вода и общата стойност на фактурата. Фактурата трябва да се записва във файл. Освен това трябва да може да се четат файловете с данни за издадените фактури.
Сериализирайте и десериализирайте обект от клас бутилка (направете необходимите промени в декларацията на класа, за да можете да реализирате сериализацията).



import java.math.BigDecimal;

public class BottleOfWater {
    private BigDecimal price;

    public BottleOfWater(BigDecimal price) {
        this.price = price;
    }

    public BigDecimal getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "BottleOfWater{" +
                "price=" + price +
                '}';
    }
}

public enum BottleType {
    GLASS, PLASTIC
}


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class Company {
    private String name;
    private List<EmptyBottle> emptyBottleList;
    private List<BottleOfWater> bottleOfWaterList;
    private List<Invoice> invoiceList;
    private BigDecimal bottleWithWaterPrice;

    public Company(String name, BigDecimal bottleWithWaterPrice) {
        this.name = name;
        this.bottleWithWaterPrice = bottleWithWaterPrice;
        this.emptyBottleList = new ArrayList<EmptyBottle>();
        this.bottleOfWaterList = new ArrayList<BottleOfWater>();
        this.invoiceList = new ArrayList<Invoice>();
    }

    public String getName() {
        return name;
    }

    public void addBottle(EmptyBottle emptyBottle) {
        this.emptyBottleList.add(emptyBottle);
    }

    public void addBottleOfWater(BottleOfWater bottleOfWater) {
        this.bottleOfWaterList.add(bottleOfWater);
    }

    public void removeBottle(EmptyBottle emptyBottle) {
        this.emptyBottleList.remove(emptyBottle);
    }

    public void removeBottleOfWater(BottleOfWater bottleOfWater) {
        this.bottleOfWaterList.remove(bottleOfWater);
    }

    public void addInvoice(Invoice invoice) {
        this.invoiceList.add(invoice);
    }

    // Add watter to the empty bottles
    public void addWatterIntoBottles(int numberOfBottles) throws InsufficientNumberOfBottlesException {
        if (this.emptyBottleList.size() < numberOfBottles) {
            throw new InsufficientNumberOfBottlesException(this.emptyBottleList.size());
        } else {
            for (int i = numberOfBottles - 1; i >= 0; i--) {
                this.bottleOfWaterList.add(new BottleOfWater(bottleWithWaterPrice));
                this.emptyBottleList.remove(i);
            }
        }
    }

    // Return invoice when selling the bottles with watter
    public Invoice sellBottledWater(int numberOfBottles, Company buyer) throws InsufficientNumberOfBottlesException {
        Invoice invoice = new Invoice(this, buyer);
        if (this.bottleOfWaterList.size() < numberOfBottles) {
            throw new InsufficientNumberOfBottlesException(this.bottleOfWaterList.size());
        } else {
            for (int i = numberOfBottles - 1; i >= 0; i--) {
                invoice.addBottlesToInvoice(this.bottleOfWaterList.remove(i));
            }
        }
        return invoice;
    }

    @Override
    public String toString() {
        return "Company{" +
                "name='" + name + '\'' +
                '}';
    }
}


import java.io.*;
import java.math.BigDecimal;

public class EmptyBottle implements Serializable {
    private BottleType bottleType;
    private BigDecimal price;

    public EmptyBottle(BottleType bottleType, BigDecimal price) {
        this.bottleType = bottleType;
        this.price = price;
    }

    public BottleType getBottleType() {
        return bottleType;
    }

    public BigDecimal getPrice() {
        return price;
    }

    // Serializing empty bottle
    public void serialize(String fileName) {
        File file = new File("files");
        file.mkdir();
        try (FileOutputStream fileOutputStream = new FileOutputStream(file.getName() + "/" + fileName);
             ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);) {
            outputStream.writeObject(this);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Deserializing empty bottle
    public EmptyBottle deserialize(String fileName) {
        EmptyBottle emptyBottle = null;
        try (FileInputStream fileInputStream = new FileInputStream("files/" + fileName);
             ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);) {

            emptyBottle = (EmptyBottle) inputStream.readObject();

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return emptyBottle;
    }


    @Override
    public String toString() {
        return "EmptyBottle{" +
                "bottleType=" + bottleType +
                ", price=" + price +
                '}';
    }
}


public class InsufficientNumberOfBottlesException extends Exception {
    private int maxNumberOfBottles;

    public InsufficientNumberOfBottlesException(int maxNumberOfBottles) {
        this.maxNumberOfBottles = maxNumberOfBottles;
    }

    public int getMaxNumberOfBottles() {
        return maxNumberOfBottles;
    }

    @Override
    public String toString() {
        return "InsufficientNumberOfBottlesException{" +
                "maxNumberOfBottles=" + maxNumberOfBottles +
                '}';
    }
}



import java.io.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class Invoice {
    private int number;
    private Company seller;
    private Company buyer;
    private LocalDate deliveryDate;
    private List<BottleOfWater> bottleOfWaterList;
    private static int numberOfInvoices = 0;

    public Invoice(Company seller, Company buyer) {
        numberOfInvoices++;
        this.number = numberOfInvoices;
        this.seller = seller;
        this.buyer = buyer;
        this.deliveryDate = LocalDate.now();
        this.bottleOfWaterList = new ArrayList<>();
    }

    public int getNumber() {
        return number;
    }

    public Company getSeller() {
        return seller;
    }

    public Company getBuyer() {
        return buyer;
    }

    public LocalDate getDeliveryDate() {
        return deliveryDate;
    }

    public static int getNumberOfInvoices() {
        return numberOfInvoices;
    }

    public void addBottlesToInvoice(BottleOfWater bottleOfWater) {
        this.bottleOfWaterList.add(bottleOfWater);
    }

    // Return the total value of the invoice
    public BigDecimal totalValue() {
        BigDecimal totalValue = BigDecimal.valueOf(0);
        for (BottleOfWater bottleOfWater : bottleOfWaterList) {
            totalValue = totalValue.add(bottleOfWater.getPrice());
        }
        return totalValue;
    }

    // Write invoice to file
    public void writeInvoice() {
        File file = new File("files");
        file.mkdir();
        try (FileWriter fileWriter = new FileWriter(file.getName() + "/Invoice " + this.number + ".txt")) {
            fileWriter.write("Invoice " + this.number + System.lineSeparator());
            fileWriter.write("Seller " + this.seller + System.lineSeparator());
            fileWriter.write("Buyer " + this.buyer + System.lineSeparator());
            fileWriter.write("Date " + this.deliveryDate + System.lineSeparator());
            fileWriter.write("Bottles of Watter:");
            for (BottleOfWater bottleOfWater : this.bottleOfWaterList) {
                fileWriter.write(bottleOfWater + " * " + bottleOfWater.getPrice()
                        + System.lineSeparator());
            }
            fileWriter.write("Total Value " + this.totalValue());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Read invoice from file
    public List<String> readInvoice(String fileName) {
        List<String> invoiceLines = new ArrayList<>();
        try (FileReader fileReader = new FileReader(fileName)) {
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                invoiceLines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return invoiceLines;
    }

    @Override
    public String toString() {
        return "Invoice{" +
                "number=" + number +
                ", seller=" + seller +
                ", buyer=" + buyer +
                ", deliveryDate='" + deliveryDate + '\'' +
                '}';
    }
}


import java.math.BigDecimal;
import java.util.List;

public class Main {

    public static void main(String[] args) {

        Company company1 = new Company("Devin", BigDecimal.valueOf(.5));
        Company company2 = new Company("Baldaran", BigDecimal.valueOf(.4));

        for (int i = 1; i <= 20; i++) {
            company1.addBottle(new EmptyBottle(BottleType.PLASTIC, BigDecimal.valueOf(.05)));
        }

        try {
            company1.addWatterIntoBottles(20);
        } catch (InsufficientNumberOfBottlesException e) {
            e.printStackTrace();
        }

        try {
            Invoice invoice1 = company1.sellBottledWater(10, company2);
            invoice1.writeInvoice();

            Invoice invoice2 = company1.sellBottledWater(10, company2);
            invoice2.writeInvoice();

            List<String> invoice1Content = invoice1.readInvoice("files/Invoice 1.txt");
            List<String> invoice2Content = invoice2.readInvoice("files/Invoice 2.txt");

            for (String line : invoice1Content) {
                System.out.println(line);
            }

            for (String line : invoice2Content) {
                System.out.println(line);
            }
        } catch (InsufficientNumberOfBottlesException e) {
            e.printStackTrace();
        }

        EmptyBottle emptyBottle = new EmptyBottle(BottleType.PLASTIC, BigDecimal.valueOf(0.07));

        String fileName = "emptyBottle.ser";

        // Serializing empty bottle
        emptyBottle.serialize(fileName);

        // Deserializing empty bottle
        System.out.println(emptyBottle.deserialize(fileName));
    }
}
